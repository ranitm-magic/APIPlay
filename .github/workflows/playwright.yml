name: Playwright Tests

on:
  repository_dispatch:
    types: [web_app_push]
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Will run all the tests in this '
        required: false
        type: string

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Use the official Playwright action for a cleaner setup
      - name: Install Playwright and browsers
        uses: microsoft/playwright-github-action@v1.1.0
        with:
          node-version: '20'
          cache: 'npm'
          browsers: 'chromium'

      - name: Run Playwright tests
        id: playwright-tests
        # `continue-on-error` is more reliable on the job level
        run: |
          if [ -n "${{ github.event.inputs.test_pattern }}" ]; then
            npx playwright test "${{ github.event.inputs.test_pattern }}"
          else
            npx playwright test
          fi
        # The exit code can be accessed via `outcome`
        continue-on-error: true

      - name: Parse test results
        id: test-summary
        run: |
          if [ -f "test-results.json" ]; then
            echo "=== ANALYZING test-results.json ==="
            
            passed=$(jq -r '.stats.expected // 0' test-results.json)
            failed=$(jq -r '.stats.unexpected // 0' test-results.json)
            skipped=$(jq -r '.stats.skipped // 0' test-results.json)
            flaky=$(jq -r '.stats.flaky // 0' test-results.json)
            duration=$(jq -r '(.stats.duration // 0) / 1000' test-results.json)

            echo "Final counts: passed=$passed, failed=$failed, skipped=$skipped, flaky=$flaky, duration=${duration}s"
            echo "passed=${passed}" >> $GITHUB_OUTPUT
            echo "failed=${failed}" >> $GITHUB_OUTPUT
            echo "skipped=${skipped}" >> $GITHUB_OUTPUT
            echo "flaky=${flaky}" >> $GITHUB_OUTPUT
            echo "duration=${duration}" >> $GITHUB_OUTPUT
            echo "results_available=true" >> $GITHUB_OUTPUT
          else
            echo "test-results.json not found, setting default values"
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "skipped=0" >> $GITHUB_OUTPUT
            echo "flaky=0" >> $GITHUB_OUTPUT
            echo "duration=0" >> $GITHUB_OUTPUT
            echo "results_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }} # Unique name for easier management
          path: playwright-report/
          retention-days: 10

      - name: Set status color
        id: status-color
        run: |
          if [ "${{ steps.test-summary.outputs.failed }}" -gt 0 ]; then
            echo "status_color=#e74c3c" >> $GITHUB_OUTPUT
            echo "status_text=failed" >> $GITHUB_OUTPUT
          else
            echo "status_color=#28a745" >> $GITHUB_OUTPUT
            echo "status_text=success" >> $GITHUB_OUTPUT
          fi

      - name: Generate email content
        if: always()
        id: generate-email
        run: |
          # Use the GITHUB_JOB_SUMMARY for a clean report on GitHub
          echo '# üé≠ Playwright Test Results' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo 'Test Summary:' >> $GITHUB_STEP_SUMMARY
          echo 'Passed: ${{ steps.test-summary.outputs.passed }}' >> $GITHUB_STEP_SUMMARY
          echo 'Failed: ${{ steps.test-summary.outputs.failed }}' >> $GITHUB_STEP_SUMMARY
          echo 'Skipped: ${{ steps.test-summary.outputs.skipped }}' >> $GITHUB_STEP_SUMMARY
          echo 'Flaky: ${{ steps.test-summary.outputs.flaky }}' >> $GITHUB_STEP_SUMMARY
          echo 'Duration: ${{ steps.test-summary.outputs.duration }}s' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "## üìä Download Report" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ [Download Full Playwright Report (HTML)](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts/playwright-report-${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY

          cat > email_body.html << EOF
          <html>
            <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
              <h2 style="color:#2E86C1;">üé≠ Playwright Test Results</h2>
              <p><strong>Status:</strong> 
                <span style="color:${{ steps.status-color.outputs.status_color }};">
                  ${{ steps.status-color.outputs.status_text }}
                </span>
              </p>

              <h3>Test Summary</h3>
              <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 70%; max-width: 500px; text-align:center;">
                <tr style="background:#f2f2f2;">
                  <th>Passed ‚úÖ</th>
                  <th>Failed ‚ùå</th>
                  <th>Skipped ‚ö°</th>
                  <th>Flaky üîÅ</th>
                  <th>Duration ‚è±</th>
                </tr>
                <tr>
                  <td style="color:#28a745;">${{ steps.test-summary.outputs.passed }}</td>
                  <td style="color:#e74c3c;">${{ steps.test-summary.outputs.failed }}</td>
                  <td style="color:#f39c12;">${{ steps.test-summary.outputs.skipped }}</td>
                  <td style="color:#8e44ad;">${{ steps.test-summary.outputs.flaky }}</td>
                  <td>${{ steps.test-summary.outputs.duration }}s</td>
                </tr>
              </table>
              
              <h3 style="margin-top:20px;">üìå Metadata</h3>
              <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; max-width: 600px;">
                <tr>
                  <td><strong>Repository</strong></td>
                  <td>${{ github.repository }}</td>
                </tr>
                <tr>
                  <td><strong>Triggered by</strong></td>
                  <td>${{ github.event_name }}</td>
                </tr>
          EOF
          
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            jq -r '"<tr><td><strong>Web App Commit</strong></td><td><code>\(.sha // "N/A")</code></td></tr><tr><td><strong>Author</strong></td><td>\(.commit_author // "N/A")</td></tr><tr><td><strong>Commit ID</strong></td><td><code>\(.commit_id // "N/A")</code></td></tr><tr><td><strong>Web App Repository</strong></td><td>\(.repository // "N/A")</td></tr><tr><td><strong>Branch</strong></td><td>\(.ref // "N/A")</td></tr>' <(echo '${{ toJSON(github.event.client_payload) }}') >> email_body.html
          fi
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.test_pattern }}" ]; then
            cat >> email_body.html << EOF
                <tr>
                  <td><strong>Test Pattern</strong></td>
                  <td><code>${{ github.event.inputs.test_pattern }}</code></td>
                </tr>
            EOF
          fi
          
          cat >> email_body.html << EOF
                <tr>
                  <td><strong>Workflow Run</strong></td>
                  <td>${{ github.run_id }}</td>
                </tr>
              </table>

              <h3 style="margin-top:20px;">üìä Links & Reports</h3>
              <div style="margin-top:15px;">
                <p style="margin-bottom:10px;">
                  üîó <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                      style="color:#2E86C1; text-decoration:none; font-weight:bold;">
                    View Workflow Logs
                  </a>
                </p>
              </div>

              <hr style="margin-top:30px; border:none; border-top:1px solid #ddd;" />
              <p style="font-size:12px; color:#999;">This is an automated email from GitHub Actions - Playwright CI.</p>
            </body>
          </html>
          EOF
          
          email_content=$(cat email_body.html)
          echo "email_content<<EOF" >> $GITHUB_OUTPUT
          echo "$email_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: üî•PLAYWRIGHT TEST RESULTS - ${{ steps.status-color.outputs.status_text }}
          html_body: ${{ steps.generate-email.outputs.email_content }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Playwright Tests <${{ secrets.EMAIL_USERNAME }}>

      - name: Clean up old workflow runs
        if: always()
        run: |
          echo "üßπ Starting workflow cleanup..."
          
          MAX_RUNS=30
          
          if [ -z "${{ secrets.CLEANUP_TOKEN }}" ]; then
            echo "‚ö†Ô∏è CLEANUP_TOKEN secret not found. Skipping workflow cleanup."
            echo "‚ÑπÔ∏è To enable automatic cleanup, create a GitHub Personal Access Token with 'actions:write' permission"
            echo "‚ÑπÔ∏è and add it as a repository secret named 'CLEANUP_TOKEN'"
            exit 0
          fi
          
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows \
            --jq '.workflows[] | select(.name == "Playwright Tests") | .id')
          
          echo "Found workflow ID: $WORKFLOW_ID"
          
          # Get all runs for this workflow
          RUNS=$(gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --paginate --jq '.workflow_runs[].id' | head -100)
          
          RUNS_ARRAY=($RUNS)
          TOTAL_RUNS=${#RUNS_ARRAY[@]}
          
          echo "Total workflow runs found: $TOTAL_RUNS"
          echo "Maximum runs to keep: $MAX_RUNS"
          
          if [ $TOTAL_RUNS -gt $MAX_RUNS ]; then
            RUNS_TO_DELETE=$((TOTAL_RUNS - MAX_RUNS))
            echo "Will delete $RUNS_TO_DELETE old workflow runs..."
            
            for (( i=$MAX_RUNS; i<$TOTAL_RUNS; i++ )); do
              RUN_ID=${RUNS_ARRAY[$i]}
              echo "Deleting workflow run: $RUN_ID"
              gh api repos/${{ github.repository }}/actions/runs/$RUN_ID \
                -X DELETE || echo "Failed to delete run $RUN_ID (might already be deleted or in progress)"
              sleep 1
            done
            
            echo "‚úÖ Cleanup completed! Deleted $RUNS_TO_DELETE old workflow runs."
          else
            echo "‚úÖ No cleanup needed. Current runs ($TOTAL_RUNS) are within limit ($MAX_RUNS)."
          fi
        env:
          GH_TOKEN: ${{ secrets.CLEANUP_TOKEN }}