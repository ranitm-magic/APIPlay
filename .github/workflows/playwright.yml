name: Playwright Tests

on:
  repository_dispatch:
    types: [web_app_push]
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Custom test file pattern (e.g., src/tests/*.test.ts)'
        required: false
        type: string

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          if [ "${{ steps.cache-playwright.outputs.cache-hit }}" = "true" ]; then
            echo "Browsers found in cache, ensuring they are properly installed..."
            npx playwright install-deps chromium
          else
            echo "Installing Playwright browsers and dependencies..."
            npx playwright install --with-deps chromium
          fi

      - name: Run Playwright tests
        id: playwright-tests
        continue-on-error: true
        run: |
          if [ "${{ github.event.inputs.test_pattern }}" != "" ]; then
            npx playwright test ${{ github.event.inputs.test_pattern }} --reporter=html --reporter=json:results.json
          else
            npx playwright test --reporter=html --reporter=json:results.json
          fi

      - name: Debug JSON structure
        if: always()
        run: |
          if [ -f "results.json" ]; then
            echo "JSON file exists, size: $(wc -c < results.json)"
            echo "First 500 chars of results.json:"
            head -c 500 results.json || echo "Could not read file"
            echo ""
            echo "JSON structure check:"
            jq -r 'keys' results.json || echo "Invalid JSON"
          else
            echo "results.json not found"
          fi

      - name: Save test summary
        id: test-summary
        run: |
          if [ -f "results.json" ]; then
            # More robust JSON parsing with multiple fallback strategies
            passed=$(jq -r '
              if .suites then 
                [.suites[] | .specs[]? | .tests[]? | select(.results[]?.status=="passed")] | length
              elif .tests then
                [.tests[] | select(.status=="passed")] | length
              else 
                0 
              end
            ' results.json 2>/dev/null || echo "0")
            
            failed=$(jq -r '
              if .suites then 
                [.suites[] | .specs[]? | .tests[]? | select(.results[]?.status=="failed")] | length
              elif .tests then
                [.tests[] | select(.status=="failed")] | length
              else 
                0 
              end
            ' results.json 2>/dev/null || echo "0")
            
            skipped=$(jq -r '
              if .suites then 
                [.suites[] | .specs[]? | .tests[]? | select(.results[]?.status=="skipped")] | length
              elif .tests then
                [.tests[] | select(.status=="skipped")] | length
              else 
                0 
              end
            ' results.json 2>/dev/null || echo "0")
            
            duration=$(jq -r '(.duration // 0) / 1000' results.json 2>/dev/null || echo "0")
            
            echo "Test counts found: passed=$passed, failed=$failed, skipped=$skipped, duration=${duration}s"
            echo "passed=${passed}" >> $GITHUB_OUTPUT
            echo "failed=${failed}" >> $GITHUB_OUTPUT
            echo "skipped=${skipped}" >> $GITHUB_OUTPUT
            echo "duration=${duration}s" >> $GITHUB_OUTPUT
            echo "results_available=true" >> $GITHUB_OUTPUT
          else
            echo "results.json not found, setting default values"
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "skipped=0" >> $GITHUB_OUTPUT
            echo "duration=0s" >> $GITHUB_OUTPUT
            echo "results_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            results.json
          retention-days: 30
          
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Playwright Test Results - ${{ steps.playwright-tests.outcome }}
          html_body: |
            <html>
              <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                <h2 style="color:#2E86C1;">üé≠ Playwright Test Results</h2>
                <p><strong>Status:</strong> 
                  <span style="color:${{ steps.playwright-tests.outcome == 'success' && '#28a745' || '#e74c3c' }};">
                    ${{ steps.playwright-tests.outcome }}
                  </span>
                </p>

                ${{ steps.test-summary.outputs.results_available == 'true' && '
                <h3>Test Summary</h3>
                <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 60%; max-width: 400px; text-align:center;">
                  <tr style="background:#f2f2f2;">
                    <th>Passed ‚úÖ</th>
                    <th>Failed ‚ùå</th>
                    <th>Skipped ‚ö°</th>
                    <th>Duration ‚è±</th>
                  </tr>
                  <tr>
                    <td style="color:#28a745;">' || '' }}${{ steps.test-summary.outputs.passed }}${{ steps.test-summary.outputs.results_available == 'true' && '</td>
                    <td style="color:#e74c3c;">' || '' }}${{ steps.test-summary.outputs.failed }}${{ steps.test-summary.outputs.results_available == 'true' && '</td>
                    <td style="color:#f39c12;">' || '' }}${{ steps.test-summary.outputs.skipped }}${{ steps.test-summary.outputs.results_available == 'true' && '</td>
                    <td>' || '' }}${{ steps.test-summary.outputs.duration }}${{ steps.test-summary.outputs.results_available == 'true' && '</td>
                  </tr>
                </table>
                ' || '<p style="color:#e74c3c;">‚ö†Ô∏è Test results could not be parsed. Check the workflow logs for details.</p>' }}
                
                <h3 style="margin-top:20px;">üìå Metadata</h3>
                <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; max-width: 600px;">
                  <tr>
                    <td><strong>Repository</strong></td>
                    <td>${{ github.repository }}</td>
                  </tr>
                  <tr>
                    <td><strong>Triggered by</strong></td>
                    <td>${{ github.event_name }}</td>
                  </tr>
                  ${{ github.event_name == 'repository_dispatch' && '
                  <tr>
                    <td><strong>Web App Commit</strong></td>
                    <td><code>' || '' }}${{ github.event.client_payload.sha || 'N/A' }}${{ github.event_name == 'repository_dispatch' && '</code></td>
                  </tr>
                  <tr>
                    <td><strong>Author</strong></td>
                    <td>' || '' }}${{ github.event.client_payload.commit_author || 'N/A' }}${{ github.event_name == 'repository_dispatch' && '</td>
                  </tr>
                  <tr>
                    <td><strong>Commit ID</strong></td>
                    <td><code>' || '' }}${{ github.event.client_payload.commit_id || 'N/A' }}${{ github.event_name == 'repository_dispatch' && '</code></td>
                  </tr>
                  <tr>
                    <td><strong>Web App Repository</strong></td>
                    <td>' || '' }}${{ github.event.client_payload.repository || 'N/A' }}${{ github.event_name == 'repository_dispatch' && '</td>
                  </tr>
                  <tr>
                    <td><strong>Branch</strong></td>
                    <td>' || '' }}${{ github.event.client_payload.ref || 'N/A' }}${{ github.event_name == 'repository_dispatch' && '</td>
                  </tr>
                  ' || '' }}
                  ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_pattern && '
                  <tr>
                    <td><strong>Test Pattern</strong></td>
                    <td><code>' || '' }}${{ github.event.inputs.test_pattern }}${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_pattern && '</code></td>
                  </tr>
                  ' || '' }}
                  <tr>
                    <td><strong>Workflow Run</strong></td>
                    <td>${{ github.run_id }}</td>
                  </tr>
                </table>

                <p style="margin-top:20px;">
                  üîó <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                        style="color:#2E86C1; text-decoration:none;">
                    View detailed test report
                  </a>
                </p>

                <hr style="margin-top:30px; border:none; border-top:1px solid #ddd;" />
                <p style="font-size:12px; color:#999;">This is an automated email from GitHub Actions - Playwright CI.</p>
              </body>
            </html>
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Playwright Tests <${{ secrets.EMAIL_USERNAME }}>